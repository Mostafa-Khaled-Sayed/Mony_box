<?php

namespace App\Http\Controllers\Mony;

use App\Http\Controllers\Controller;
use App\Http\Services\FatoraServices;
use App\Models\Score;
use App\Models\User;
use Illuminate\Http\Request;

require '../vendor/autoload.php';

use Checkout\CheckoutApiException;
use Checkout\CheckoutException;
use Checkout\CheckoutSdk;
use Checkout\Common\Currency;
use Checkout\Environment;
use Checkout\Payments\Request\PaymentRequest;
use Checkout\Payments\Request\Source\RequestTokenSource;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Auth;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use App\Models\Notification;
use App\Models\WithdrawOrDepositMoney;
use Illuminate\Support\Facades\Hash;

class FatoraController extends Controller
{
    private $FatoraServices;
    public function __construct(FatoraServices $FatoraServices)
    {
        $this->FatoraServices = $FatoraServices;
    }
    public function payorder(Request $request)
    {
            $validated = $request->validate([
        'price' => 'required|numeric',
    ]);

        $price=$request->price;
        $not=Notification::create([
            'status'=>'غير جاهزه',
            'type'=>'send',
            'user_id'=>auth()->user()->id,
             "message"=> $request->price."مبلغ المراد دفعه",
            ]);
            WithdrawOrDepositMoney::create([
                'deposit_money'=>$request->price, 
                'withdraw_money'=>0,
                'notification_id'=>$not->id,
                'status'=>1,
                'user_id'=>auth()->user()->id,
                'status_mony'=>'0',
                ]);
        
        return  view('web.payment.paymentGetWay.index',compact('price'));
    }
    public function withdrow(Request $request)
    {
  $validated = $request->validate([
        'price' => 'required|numeric',
        'password' => 'required',
    ]);

    if (password_verify($request->password,Auth::guard('web')->user()->wallet[0]->password)) {

        $price=$request->price;
        $not=Notification::create([
            'status'=>'غير جاهزه',
            'type'=>'withdrow',
            'user_id'=>auth()->user()->id,
            "message"=> $request->price . "مبلغ المراد سحبه بعد الخصم",
            ]);
            WithdrawOrDepositMoney::create([
                'deposit_money'=>0, 
                'withdraw_money'=>$request->price,
                'notification_id'=>$not->id,
                'status'=>0,
                'user_id'=>auth()->user()->id,
                'status_mony'=>'0',
                ]);
        
        return  view('web.payment.paymentGetWay.index',compact('price'));
    }else{

        toastr()->error("The wallet has been linked effectively");
              return redirect()->back();
    }
    }

    public function store(Request $request)
    {
        // dd('Hello Wrold');


        $log = new Logger("checkout-sdk-php-sample");
        $log->pushHandler(new StreamHandler("php://stdout"));

        // Initialize Checkout API
        try {
            $api = CheckoutSdk::builder()->staticKeys()
                ->environment(Environment::sandbox())
                ->secretKey(env("CHECKOUT_SECRET_KEY"))
                ->build();
        } catch (CheckoutException $e) {
            $log->error("An exception occurred while initializing Checkout SDK : {$e->getMessage()}");
            http_response_code(400);
        }

        $postData = file_get_contents("php://input");
        $request = json_decode($postData);

        // The token generated by Frames on the client side
        $requestTokenSource = new RequestTokenSource();
        $requestTokenSource->token = $request->token;
        $price= $request->price;
        $request = new PaymentRequest();
        $request->source = $requestTokenSource;
        $request->currency = Currency::$USD;
        $request->amount = $price*100;
        $request->processing_channel_id = "pc_fbcjvmette5elbmoa6v2tm6nbe";

        try {
            echo json_encode($api->getPaymentsClient()->requestPayment($request));
            $userScore = Score::Where('user_id', Auth::user()->id)->get();
            $userScore[0]->update([
                'score' => $userScore[0]->score + $price,
            ]);
            User::find(auth()->user()->id)->update(['score'=>$price]);
            // return response()->json(['status' => 'success'], Response::HTTP_OK);
        } catch (CheckoutApiException $e) {
            $log->error("An exception occurred while processing payment request");
            http_response_code(400);
        } }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
}
